{"version":3,"sources":["ActionProvider.js","MessageParser.js","config.js","App.js","serviceWorker.js","index.js"],"names":["ActionProvider","createChatBotMessage","setStateFunc","this","setState","e","console","log","fetch","then","response","json","data","setup","delivery","undefined","greetingMessage","updateChatbotState","reply","joke","yeah","nah","message","prevState","messages","MessageParser","actionProvider","lowerCaseMessage","toLowerCase","submitHandler","greet","thnks","frnds","wtf","config","botName","initialMessages","customStyles","botMessageBox","backgroundColor","chatButton","App","className","messageParser","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"wRAoEiBA,G,iBAhEb,WAAYC,EAAsBC,GAAe,oBAC/CC,KAAKF,qBAAuBA,EAC5BE,KAAKC,SAAWF,E,0DAGJG,GAEVC,QAAQC,IAAIF,K,8BAWP,IAAD,OAENG,MADe,yCAEZC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,GADeN,QAAQC,IAAIK,EAAMA,EAAKC,MAAMD,EAAKE,eACjCC,IAAbH,EAAKC,MACR,CAAE,IAAMG,EAAkB,EAAKf,qBAAsBW,EAAKC,MAAM,MAClE,EAAKI,mBAAmBD,GACxB,IAAME,EAAM,EAAKjB,qBAAsBW,EAAKE,SAAS,MACrD,EAAKG,mBAAmBC,OACpB,CACF,IAAMF,EAAkB,EAAKf,qBAAsBW,EAAKO,MAC1D,EAAKF,mBAAmBD,GAExB,IAAMI,EAAO,EAAKnB,qBAAqB,8CACvC,EAAKgB,mBAAmBG,Q,4BAM1B,IAAMC,EAAMlB,KAAKF,qBAAqB,wCACtCE,KAAKc,mBAAmBI,GACxB,IAAMD,EAAOjB,KAAKF,qBAAqB,qBACrCE,KAAKc,mBAAmBG,K,8BAG1B,IAAMC,EAAMlB,KAAKF,qBAAqB,sIACtCE,KAAKc,mBAAmBI,K,8BAIxB,IAAMA,EAAMlB,KAAKF,qBAAqB,2CACtCE,KAAKc,mBAAmBI,K,yCAEPC,GAKlBnB,KAAKC,UAAS,SAAAmB,GAAS,kCACfA,GADe,IACJC,SAAS,GAAD,mBAAMD,EAAUC,UAAhB,CAA0BF,a,MCpCzCG,E,WA1Bb,WAAYC,GAAiB,oBAC3BvB,KAAKuB,eAAiBA,E,kDAGlBJ,GAEJ,IAAMK,EAAmBL,EAAQM,cACX,OAAlBD,GAA6C,QAAlBA,GAA6C,QAAlBA,GAA6C,OAAlBA,GAA4C,UAAlBA,GAC7GxB,KAAKuB,eAAeG,cAAcF,GAClCxB,KAAKuB,eAAeI,SAEK,MAAlBH,GAA4C,OAAlBA,GAA4C,YAAlBA,GAAiD,KAAlBA,GAA0C,aAAlBA,GAClHxB,KAAKuB,eAAeG,cAAcF,GAClCxB,KAAKuB,eAAeK,SAGK,UAAlBJ,GAAgD,UAAlBA,GAA+C,SAAlBA,GAA8C,UAAlBA,GAA+C,UAAlBA,GAAgD,UAAlBA,GACzJxB,KAAKuB,eAAeG,cAAcF,GAClCxB,KAAKuB,eAAeM,SAGpB7B,KAAKuB,eAAeO,U,KCPbC,EAbA,CACbC,QAAS,QACTC,gBAAiB,CAACnC,+BAAqB,mCACvCoC,aAAc,CACZC,cAAe,CACbC,gBAAiB,WAEnBC,WAAY,CACVD,gBAAiB,aCQRE,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,IAAD,CAASR,OAAQA,EAAQR,eAAgB1B,EAAiB2C,cAAelB,OCA7DmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMtC,c","file":"static/js/main.0a8a0f5c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from 'axios'\r\n\r\nclass ActionProvider {\r\n    constructor(createChatBotMessage, setStateFunc) {\r\n      this.createChatBotMessage = createChatBotMessage;\r\n      this.setState = setStateFunc;\r\n    }    \r\n  \r\n    submitHandler(e){\r\n        \r\n        console.log(e)\r\n       //  headers: {\r\n       // 'Access-Control-Allow-Origin' : '*'\r\n       //  }\r\n       const options = {\r\n          headers: {\r\n             'Content-Type': 'application/json',\r\n           }\r\n       };\r\n\r\n    }\r\n    greet() {\r\n      const apiUrl = 'https://sv443.net/jokeapi/v2/joke/Any';\r\n      fetch(apiUrl)\r\n        .then((response) => response.json())\r\n        .then((data) => {console.log(data, data.setup,data.delivery);\r\n          if(data.setup!==undefined)\r\n          { const greetingMessage = this.createChatBotMessage( data.setup,\"\\n\")\r\n        this.updateChatbotState(greetingMessage);\r\n        const reply=this.createChatBotMessage( data.delivery,\"\\n\")\r\n        this.updateChatbotState(reply);}\r\n        else{\r\n          const greetingMessage = this.createChatBotMessage( data.joke)\r\n        this.updateChatbotState(greetingMessage);\r\n        }\r\n        const yeah = this.createChatBotMessage(\"Wanna hear more?\\nðŸ¤£ðŸ˜‚\")\r\n        this.updateChatbotState(yeah);\r\n      });\r\n     \r\n    }\r\n    \r\n    wtf(){\r\n      const nah = this.createChatBotMessage(\"Yeah Kya Tutul Putul??\\nðŸ¤”\")\r\n      this.updateChatbotState(nah);\r\n      const yeah = this.createChatBotMessage(\"Say Yes for Jokes\")\r\n        this.updateChatbotState(yeah);\r\n    };\r\n    frnds(){\r\n      const nah = this.createChatBotMessage(\"ðŸ˜ŽAur Beta kaisa lga mera kaam??\\nMaja aaya ki nhi??\\n\\n Nhi aaya toh hum kya kre BCðŸ˜’\\ntmhare lia nhi bnaye h\")\r\n      this.updateChatbotState(nah);\r\n    }\r\n\r\n    thnks(){\r\n      const nah = this.createChatBotMessage(\"Thanks for checking my workðŸ¤—\")\r\n      this.updateChatbotState(nah);\r\n    }\r\n    updateChatbotState(message) {\r\n   \r\n  // NOTE: This function is set in the constructor, and is passed in      // from the top level Chatbot component. The setState function here     // actually manipulates the top level state of the Chatbot, so it's     // important that we make sure that we preserve the previous state.\r\n   \r\n      \r\n     this.setState(prevState => ({\r\n          ...prevState, messages: [...prevState.messages, message]\r\n      }))\r\n    }\r\n  }\r\n  \r\n  export default ActionProvider","class MessageParser {\r\n    constructor(actionProvider) {\r\n      this.actionProvider = actionProvider;\r\n    }\r\n\r\n    parse(message) {\r\n\r\n      const lowerCaseMessage = message.toLowerCase()\r\n      if (lowerCaseMessage==\"yes\" || lowerCaseMessage==\"yeah\"|| lowerCaseMessage==\"sure\"|| lowerCaseMessage==\"haa\"|| lowerCaseMessage==\"bilkul\") {\r\n        this.actionProvider.submitHandler(lowerCaseMessage)\r\n        this.actionProvider.greet()\r\n      }\r\n      else if (lowerCaseMessage==\"no\" || lowerCaseMessage==\"nah\"|| lowerCaseMessage==\"not sure\"|| lowerCaseMessage==\"n\"|| lowerCaseMessage==\"katai naa\") {\r\n        this.actionProvider.submitHandler(lowerCaseMessage)\r\n        this.actionProvider.thnks()\r\n        \r\n      }\r\n      else if (lowerCaseMessage==\"raunak\" || lowerCaseMessage==\"amisha\"|| lowerCaseMessage==\"vivek\"|| lowerCaseMessage==\"pragya\"|| lowerCaseMessage==\"shoaib\" || lowerCaseMessage==\"ishika\") {\r\n        this.actionProvider.submitHandler(lowerCaseMessage)\r\n        this.actionProvider.frnds()\r\n      }\r\n      else{\r\n        this.actionProvider.wtf()\r\n      }\r\n    }\r\n}\r\n  \r\n  export default MessageParser","import { createChatBotMessage } from 'react-chatbot-kit';\r\n\r\nconst config = { \r\n  botName: \"Joker\",\r\n  initialMessages: [createChatBotMessage(\"Want to listen to some Jokes??\")],\r\n  customStyles: {\r\n    botMessageBox: {\r\n      backgroundColor: \"#008ad3\",\r\n    },\r\n    chatButton: {\r\n      backgroundColor: \"#008ad3\",\r\n    },\r\n  },\r\n}\r\n\r\nexport default config","import React from 'react';\nimport './App.css';\nimport Chatbot from 'react-chatbot-kit'\n\nimport ActionProvider from './ActionProvider';\nimport MessageParser from './MessageParser.js';\nimport config from './config.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Chatbot config={config} actionProvider={ActionProvider}  messageParser={MessageParser} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}